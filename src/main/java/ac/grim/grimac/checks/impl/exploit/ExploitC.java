package ac.grim.grimac.checks.impl.exploit;

import ac.grim.grimac.checks.Check;
import ac.grim.grimac.checks.CheckData;
import ac.grim.grimac.checks.type.PacketCheck;
import ac.grim.grimac.player.GrimPlayer;
import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.manager.server.ServerVersion;
import com.github.retrooper.packetevents.protocol.packettype.PacketType;
import com.github.retrooper.packetevents.util.Vector3d;
import com.github.retrooper.packetevents.util.Vector3f;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientPlayerFlying;

@CheckData(name = "ExploitC")
public class ExploitC extends Check implements PacketCheck {
    Vector3d lastDuplicatePosition;
    Vector3f lastDuplicateLook;

    public ExploitC(GrimPlayer player) {
        super(player);
    }

    @Override
    public void onPacketReceive(final PacketReceiveEvent event) {
        if (WrapperPlayClientPlayerFlying.isFlying(event.getPacketType()) ) {
            WrapperPlayClientPlayerFlying flying = new WrapperPlayClientPlayerFlying(event);

            if (player.packetStateData.lastPacketWasOnePointSeventeenDuplicate) {
                if (shouldModifyPackets() && PacketEvents.getAPI().getServerManager().getVersion().isOlderThanOrEquals(ServerVersion.V_1_8_8)) {
                    // deny 1.17 packets on 1.8 server
                    event.setCancelled(true);
                }
                else {
                    if (lastDuplicatePosition != null) {
                        if (lastDuplicatePosition.equals(flying.getLocation().getPosition()) && lastDuplicateLook.getX() == flying.getLocation().getYaw() && lastDuplicateLook.getY() == flying.getLocation().getPitch()) {
                            // deny duplicate packets in 1 tick
                            if (shouldModifyPackets())
                                event.setCancelled(true);
                        }
                        else {
                            // player ran after a gameloop, use this check last tick?
                            //player.packetStateData.lastPacketWasOnePointSeventeenDuplicate = false;
                        }
                    }
                }
                lastDuplicatePosition = flying.getLocation().getPosition();
                lastDuplicateLook = new Vector3f(flying.getLocation().getYaw(), flying.getLocation().getPitch(), 0);
            }
            else if (!player.packetStateData.lastPacketWasTeleport) {
                lastDuplicatePosition = null;
                lastDuplicateLook = null;
            }
        }

    }

}
